{"version":3,"sources":["hoist.js"],"names":[],"mappings":"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","file":"hoist-compiled.js","sourcesContent":["/*istanbul ignore next*/\"use strict\";\n\nvar _keys = require(\"babel-runtime/core-js/object/keys\");\n\nvar _keys2 = _interopRequireDefault(_keys);\n\nvar /*istanbul ignore next*/_babelTypes = require(\"babel-types\");\n\n/*istanbul ignore next*/\nvar t = _interopRequireWildcard(_babelTypes);\n\n/*istanbul ignore next*/\nfunction _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar hasOwn = Object.prototype.hasOwnProperty;\n\n// The hoist function takes a FunctionExpression or FunctionDeclaration\n// and replaces any Declaration nodes in its body with assignments, then\n// returns a VariableDeclaration containing just the names of the removed\n// declarations.\n/**\n * Copyright (c) 2014, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * https://raw.github.com/facebook/regenerator/master/LICENSE file. An\n * additional grant of patent rights can be found in the PATENTS file in\n * the same directory.\n */\n\nexports.hoist = function (funPath) {\n  t.assertFunction(funPath.node);\n\n  var vars = {};\n\n  function varDeclToExpr(vdec, includeIdentifiers) {\n    t.assertVariableDeclaration(vdec);\n    // TODO assert.equal(vdec.kind, \"var\");\n    var exprs = [];\n\n    vdec.declarations.forEach(function (dec) {\n      vars[dec.id.name] = dec.id;\n\n      if (dec.init) {\n        exprs.push(t.assignmentExpression(\"=\", dec.id, dec.init));\n      } else if (includeIdentifiers) {\n        exprs.push(dec.id);\n      }\n    });\n\n    if (exprs.length === 0) return null;\n\n    if (exprs.length === 1) return exprs[0];\n\n    return t.sequenceExpression(exprs);\n  }\n\n  funPath.get(\"body\").traverse({\n    VariableDeclaration: {\n      exit: function /*istanbul ignore next*/exit(path) {\n        var expr = varDeclToExpr(path.node, false);\n        if (expr === null) {\n          path.remove();\n        } else {\n          // We don't need to traverse this expression any further because\n          // there can't be any new declarations inside an expression.\n          path.replaceWith(t.expressionStatement(expr));\n        }\n\n        // Since the original node has been either removed or replaced,\n        // avoid traversing it any further.\n        path.skip();\n      }\n    },\n\n    ForStatement: function /*istanbul ignore next*/ForStatement(path) {\n      var init = path.node.init;\n      if (t.isVariableDeclaration(init)) {\n        path.get(\"init\").replaceWith(varDeclToExpr(init, false));\n      }\n    },\n\n    ForXStatement: function /*istanbul ignore next*/ForXStatement(path) {\n      var left = path.get(\"left\");\n      if (left.isVariableDeclaration()) {\n        left.replaceWith(varDeclToExpr(left.node, true));\n      }\n    },\n\n    FunctionDeclaration: function /*istanbul ignore next*/FunctionDeclaration(path) {\n      var node = path.node;\n      vars[node.id.name] = node.id;\n\n      var assignment = t.expressionStatement(t.assignmentExpression(\"=\", node.id, t.functionExpression(node.id, node.params, node.body, node.generator, node.expression)));\n\n      if (path.parentPath.isBlockStatement()) {\n        // Insert the assignment form before the first statement in the\n        // enclosing block.\n        path.parentPath.unshiftContainer(\"body\", assignment);\n\n        // Remove the function declaration now that we've inserted the\n        // equivalent assignment form at the beginning of the block.\n        path.remove();\n      } else {\n        // If the parent node is not a block statement, then we can just\n        // replace the declaration with the equivalent assignment form\n        // without worrying about hoisting it.\n        path.replaceWith(assignment);\n      }\n\n      // Don't hoist variables out of inner functions.\n      path.skip();\n    },\n\n    FunctionExpression: function /*istanbul ignore next*/FunctionExpression(path) {\n      // Don't descend into nested function expressions.\n      path.skip();\n    }\n  });\n\n  var paramNames = {};\n  funPath.get(\"params\").forEach(function (paramPath) {\n    var param = paramPath.node;\n    if (t.isIdentifier(param)) {\n      paramNames[param.name] = param;\n    } else {\n      // Variables declared by destructuring parameter patterns will be\n      // harmlessly re-declared.\n    }\n  });\n\n  var declarations = [];\n\n  /*istanbul ignore next*/(0, _keys2.default)(vars).forEach(function (name) {\n    if (!hasOwn.call(paramNames, name)) {\n      declarations.push(t.variableDeclarator(vars[name], null));\n    }\n  });\n\n  if (declarations.length === 0) {\n    return null; // Be sure to handle this case!\n  }\n\n  return t.variableDeclaration(\"var\", declarations);\n};"]}