{"version":3,"sources":["mirrorDraw.js"],"names":[],"mappings":"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","file":"mirrorDraw-compiled.js","sourcesContent":["/**\n * Created by Lyle Denman on 5/14/16.\n * With lots of help from: www.simonsarris.com/blog/510-making-html5-canvas-useful\n */\n(function(){\n  /************************/\n  /***** Square class *****/\n  /************************/\n  class Square{\n    constructor(x, y, w, fillColor) {\n      this.x = x || 0; // Default to 0 if no x provided, etc\n      this.y = y || 0;\n      this.width = w || 1;\n      this.height = w || 1;\n      this.fillColor = fillColor || \"#FFFFFF\";\n    }\n\n    draw(ctx) { // Draw square to canvas\n      ctx.fillStyle = this.fillColor;\n      ctx.fillRect(this.x, this.y, this.width, this.height);\n    }\n  }\n\n  /************************/\n  /*** CanvasState class **/\n  /************************/\n  class CanvasState {\n    constructor(canvas, numRows, squareDim) {\n      this.canvas = canvas;\n      this.numRows = numRows;\n      this.squareDim = squareDim;\n      this.shapes = []; // Store the shapes drawn to the canvas\n      this.listenMousedown();\n    }\n\n    listenMousedown() {\n      this.canvas.addEventListener('mousedown', (e) => {\n        var mouse = CanvasState.getMouse(e);\n        var mx = mouse.x;\n        var my = mouse.y;\n\n        var shapeIndex = this.getShapeIndexAt(mx, my);\n        if (shapeIndex != -1) {\n          var mirrorIndex = CanvasState.getMirror(shapeIndex, this.numRows);\n\n          if (mirrorIndex != shapeIndex) {\n            // If numRows is odd, a shape in the center column has itself as a mirror\n            // So no need to flipColor() twice\n            CanvasState.flipColor(this.shapes[mirrorIndex]);\n          }\n          CanvasState.flipColor(this.shapes[shapeIndex]);\n          ctx.clearRect(0, 0, this.canvas.width, this.canvas.height); // clear canvas\n          this.drawSquares(); // draw board\n        }\n      });\n    }\n\n    createSquares () {\n      var count = 0;\n      for (var x = 0; x < this.canvas.width; x+=this.squareDim) {\n        for (var y = 0; y < this.canvas.height; y+=this.squareDim) {\n          this.shapes[count] = new Square(x, y, this.squareDim);\n          count++;\n        }\n      }\n    }\n\n    drawSquares() {\n      for (var i = 0; i < this.shapes.length; i++) {\n        if (this.shapes[i] !== undefined) {\n          this.shapes[i].draw(ctx);\n        }\n      }\n    }\n\n    getShapeIndexAt(x, y) {\n      for (var i = 0; i < this.shapes.length; i++) {\n        if (this.shapes[i] !== undefined) {\n          if (x >= this.shapes[i].x && x < this.shapes[i].x + this.squareDim) {\n            if (y >= this.shapes[i].y && y < this.shapes[i].y + this.squareDim) {\n              return i;\n            }\n          }\n        }\n      }\n      return -1; // Error: no shape found\n    }\n\n  }\n\n  /************************/\n  /***** CanvasState ******/\n  /*** Static Functions ***/\n  /************************/\n  CanvasState.getMouse = function(e) {\n    return {x: e.offsetX, y: e.offsetY};\n  };\n\n  CanvasState.flipColor = function(shape) {\n    if (shape.fillColor == \"#000000\") {\n      shape.fillColor = \"#FFFFFF\";\n    } else {\n      shape.fillColor = \"#000000\";\n    }\n  };\n\n  CanvasState.getMirror = function(index, numRows) {\n    // Return a given square's mirrored square (across the y-axis)\n    if (index === 0) {\n      return Math.floor(numRows * (numRows-1));\n    }\n\n    var nOrZero = (index % numRows === 0) ? numRows : 0;\n    return numRows*numRows - (numRows * (Math.ceil(index / numRows))) +\n        (index % numRows) - nOrZero;\n  };\n\n  /************************/\n  /****   MAIN EVENT   ****/\n  /************************/\n  var canvas = document.getElementById('canvas');\n  if (canvas.getContext) {\n    var ctx = canvas.getContext('2d');\n  }\n  var numRows = 16;\n  var canvasDim = canvas.width;\n\n  // Update canvas dimensions for pixel-perfection\n  while (canvasDim % numRows !== 0) {\n    canvasDim++;\n  }\n  canvas.width = canvas.height = canvasDim;\n\n  var squareDim = canvasDim/numRows; // Set dimensions of the square\n\n  var drawingBoard = new CanvasState(canvas, numRows, squareDim);\n  drawingBoard.createSquares();\n  drawingBoard.drawSquares();\n})();\n"]}